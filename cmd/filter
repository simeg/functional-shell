#!/usr/bin/env bash

set -eo pipefail

# Version handling
if [[ "${1:-}" == "--version" || "${1:-}" == "-v" ]]; then
    script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    # Try different VERSION file locations
    for version_file in \
        "$script_dir/../VERSION" \
        "$HOME/.local/lib/functional-shell/VERSION" \
        "/usr/local/lib/functional-shell/VERSION"; do
        if [ -f "$version_file" ]; then
            echo "filter $(cat "$version_file")"
            exit 0
        fi
    done
    echo "filter (unknown version)"
    exit 0
fi

# Show help if requested
if [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
    cat << 'EOF'
filter - Filter lines based on predicate operations

USAGE:
    filter <operation> [args...]
    filter --version
    filter --help

DESCRIPTION:
    Reads lines from stdin and only outputs lines where the operation returns "true".
    Filter operations are security-restricted to a predefined allowlist.

EXAMPLES:
    # Numeric filtering
    seq 1 10 | filter even                     # 2, 4, 6, 8, 10
    seq 1 100 | filter gt 50                   # Numbers > 50
    
    # String filtering  
    ls | filter contains ".txt"                # Files with .txt
    cat file.txt | filter non_empty            # Remove empty lines
    
    # File filtering
    find . -type f | filter is_file            # Only regular files
    ls -1 | filter exists                      # Only existing files
    
    # Combining with map
    find . -name "*.log" | filter exists | map basename

FILTER OPERATIONS:
    Arithmetic: even, odd
    Comparison: eq, ne, gt, lt, ge, le  
    String:     contains, starts_with, ends_with
    File:       is_file, is_dir, is_link, exists, has_ext
    Logical:    non_empty

SECURITY NOTE:
    Filter operations are restricted to an allowlist for security.
    Only predefined operations are available.

See also: map(1)
EOF
    exit 0
fi

# Show usage if no arguments
if [[ $# -eq 0 ]]; then
    echo "Usage: filter <operation> [args...]" >&2
    echo "       filter --help" >&2
    echo "       filter --version" >&2
    exit 1
fi

# Determine script location and set lib_dir
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Check if this is a symlinked executable and resolve the real location
if [ -L "${BASH_SOURCE[0]}" ]; then
    real_script="$(readlink "${BASH_SOURCE[0]}")"
    if [[ "$real_script" = /* ]]; then
        # Absolute path
        real_script_dir="$(cd "$(dirname "$real_script")" && pwd)"
    else
        # Relative path
        real_script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")/$(dirname "$real_script")" && pwd)"
    fi
    
    # Check if lib directory exists relative to real script location
    if [ -d "$real_script_dir/../lib" ]; then
        lib_dir="$real_script_dir/../lib"
    fi
fi

# Fallback location checks
if [ -z "${lib_dir:-}" ]; then
    if [ -f "$script_dir/../lib/core/functions/_filter" ]; then
        # Development mode - lib directory is relative to script
        lib_dir="$script_dir/../lib"
    elif [ -d "$HOME/.local/lib/functional-shell" ]; then
        # Local install mode - use ~/.local/lib/functional-shell
        lib_dir="$HOME/.local/lib/functional-shell"
    else
        # System install mode - use /usr/local/lib/functional-shell
        lib_dir="/usr/local/lib/functional-shell"
    fi
fi

source "$lib_dir/core/functions/_filter"

source "$lib_dir/operations/arithmetic"
source "$lib_dir/operations/file_and_dir"
source "$lib_dir/operations/comparison"
source "$lib_dir/operations/string"
source "$lib_dir/operations/logical"

_filter "$@"
