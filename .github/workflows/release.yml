name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bats
        uses: bats-core/bats-action@3.0.0

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run tests
        run: make ci-bash

      - name: Run integration tests  
        run: make ci-py

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update VERSION file
        run: |
          echo "${{ steps.get_version.outputs.version }}" > VERSION
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add VERSION
          git diff --staged --quiet || git commit -m "Update VERSION to ${{ steps.get_version.outputs.version }}"

      - name: Create source tarball
        run: |
          tar --exclude='.git' --exclude='.github' --exclude='packaging' \
              -czf functional-shell-${{ steps.get_version.outputs.version }}.tar.gz .

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            sed -n "/^## \[${{ steps.get_version.outputs.version }}\]/,/^## \[/p" CHANGELOG.md | head -n -1 > release_notes.md
          else
            echo "Release ${{ steps.get_version.outputs.tag_name }}" > release_notes.md
            echo "" >> release_notes.md
            echo "Functional programming utilities for shell scripting." >> release_notes.md
            echo "" >> release_notes.md
            echo "### Installation" >> release_notes.md
            echo "\`\`\`bash" >> release_notes.md
            echo "# Homebrew (recommended)" >> release_notes.md
            echo "brew install simeg/tap/functional-shell" >> release_notes.md
            echo "" >> release_notes.md
            echo "# Direct install" >> release_notes.md
            echo "curl -fsSL https://raw.githubusercontent.com/simeg/functional-shell/master/install.sh | bash" >> release_notes.md
            echo "\`\`\`" >> release_notes.md
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          release_name: Release ${{ steps.get_version.outputs.tag_name }}
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: Upload source tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./functional-shell-${{ steps.get_version.outputs.version }}.tar.gz
          asset_name: functional-shell-${{ steps.get_version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [test, release]
    if: github.repository == 'simeg/functional-shell'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Calculate SHA256
        id: sha256
        run: |
          URL="https://github.com/simeg/functional-shell/archive/${{ steps.get_version.outputs.tag_name }}.tar.gz"
          SHA256=$(curl -sL "$URL" | sha256sum | cut -d' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT

      - name: Update Homebrew formula
        run: |
          sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/${{ steps.get_version.outputs.tag_name }}/g" packaging/homebrew/functional-shell.rb
          sed -i "s/0000000000000000000000000000000000000000000000000000000000000000/${{ steps.sha256.outputs.sha256 }}/g" packaging/homebrew/functional-shell.rb

      - name: Create Homebrew PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update Homebrew formula to ${{ steps.get_version.outputs.version }}"
          title: "Update Homebrew formula to ${{ steps.get_version.outputs.version }}"
          body: |
            Updates Homebrew formula for release ${{ steps.get_version.outputs.tag_name }}
            
            - Version: ${{ steps.get_version.outputs.version }}
            - SHA256: ${{ steps.sha256.outputs.sha256 }}
            
            Auto-generated by release workflow.
          branch: update-homebrew-${{ steps.get_version.outputs.version }}
          base: master

  build-debian:
    name: Build Debian Package
    runs-on: ubuntu-latest
    needs: [test, release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y debhelper-compat devscripts build-essential

      - name: Get version
        id: get_version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create source tarball
        run: |
          tar --exclude='.git' --exclude='.github' --exclude='packaging' \
              -czf ../functional-shell_${{ steps.get_version.outputs.version }}.orig.tar.gz .

      - name: Copy debian directory
        run: cp -r packaging/debian .

      - name: Update changelog
        run: |
          cd debian
          DEBEMAIL="s.egersand@gmail.com" DEBFULLNAME="Simon Egersand" \
          dch -v "${{ steps.get_version.outputs.version }}-1" \
              "Release version ${{ steps.get_version.outputs.version }}"

      - name: Build package
        run: |
          debuild -us -uc

      - name: Upload Debian package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ../functional-shell_${{ steps.get_version.outputs.version }}-1_all.deb
          asset_name: functional-shell_${{ steps.get_version.outputs.version }}-1_all.deb
          asset_content_type: application/vnd.debian.binary-package