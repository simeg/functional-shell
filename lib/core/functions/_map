#!/usr/bin/env bash

set -e

function _map {
  local fn_arg="$1"
  shift
  local args="$*"

  # Validate function name contains only safe characters
  if [[ ! "$fn_arg" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
    printf "Error: Invalid function name '%s' for map\n" "$fn_arg" >&2
    exit 1
  fi

  if [ "$(declare -f "$fn_arg" > /dev/null; echo $?)" -gt 0 ]; then
    echo "Error: '$fn_arg' is not a valid operation for map" >&2
    echo "" >&2
    echo "Common operations:" >&2
    echo "  Arithmetic: add, sub, mul, pow, even, odd" >&2
    echo "  String:     to_upper, to_lower, reverse, append, prepend, len" >&2
    echo "  File:       basename, dirname, abspath, strip_ext" >&2
    echo "  Other:      id, identity" >&2
    echo "" >&2
    echo "For help: map --help" >&2
    echo "For all operations, see the README" >&2
    exit 1
  fi

  # If empty input exit with 1
  if test -t 0; then
    exit 1
  fi

  # Change IFS to preserve whitespace in filenames
  local old_ifs=$IFS
  IFS=''

  local has_input=false
  while read -r line; do
    has_input=true
    # Use function call - this should not create subshells
    "$fn_arg" "$line" "$args"
  done < /dev/stdin

  # If no input was provided, exit with 1
  if [ "$has_input" = "false" ]; then
    exit 1
  fi

  IFS=$old_ifs
}

export -f _map
