#!/usr/bin/env bash

set -e

function reverse {
  local value=$1
  local reversed

  reversed=$(printf "%s\n" "$value" | rev)
  printf "%s\n" "$reversed"
}

function append {
  local value=$1
  local suffix=$2

  printf "%s\n" "$value""$suffix"
}

function strip {
  local value=$1

  printf "%s\n" "$value" | xargs
}

function substr {
  local value=$1
  local args=$2
  local split_args start end

  old_ifs=$IFS
  IFS=' '

  local i=0
  for arg in $args; do
    split_args[$i]="$arg"
    i=$((i + 1))
  done

  IFS=$old_ifs

  start=${split_args[0]}
  end=$((split_args[1] + 1))

  printf "%s\n" "${value:${start}:${end}}"
}

function take {
  local value=$1
  local count=$2

  printf "%s\n" "${value:0:${count}}"
}

function to_lower {
  local value=$1

  printf "%s\n" "$value" | tr '[:upper:]' '[:lower:]'
}

function to_upper {
  local value=$1

  printf "%s\n" "$value" | tr '[:lower:]' '[:upper:]'
}

function replace {
  local value=$1
  local args=$2
  local old_ifs split_args old new

  old_ifs=$IFS
  IFS=' '

  local i=0
  for arg in $args; do
    split_args[$i]="$arg"
    i=$((i + 1))
  done

  IFS=$old_ifs

  old=${split_args[0]}
  new=${split_args[1]}

  printf "%s\n" "${value/$old/$new}"
}

function prepend {
  local value=$1
  local prefix=$2

  printf "%s\n" "$prefix$value"
}

function capitalize {
  local value=$1

  printf "%s\n" "$(tr '[:lower:]' '[:upper:]' <<< "${value:0:1}")${value:1}"
}

function drop {
  local value=$1
  local count=$2

  printf "%s\n" "${value:count}"
}

function duplicate {
  local value=$1

  printf "%s %s\n" "$value" "$value"
}

function contains {
  local value=$1
  local needle=$2

  if [[ $value == *"$needle"* ]]; then
    printf "%s\n" true
  else
    printf "%s\n" false
  fi
}

function starts_with {
  local value=$1
  local pattern=$2

  if [[ $value == "$pattern"* ]]; then
    printf "%s\n" true
  else
    printf "%s\n" false
  fi
}

function ends_with {
  local value=$1
  local pattern=$2

  if [[ $value == *"$pattern" ]]; then
    printf "%s\n" true
  else
    printf "%s\n" false
  fi
}

function len {
  local value=$1

  printf "%s\n" ${#value}
}

function length {
  len "$1"
}

function split {
  local value=$1
  local delimiter=$2

  IFS=$delimiter read -ra split_string <<< "$value"

  for i in "${split_string[@]}"; do
    printf "%s\n" "$i"
  done
}

export -f append
